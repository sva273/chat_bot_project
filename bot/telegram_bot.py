from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

from bot.weather import get_weather
from bot.time_utils import get_current_time
from bot.quotes import get_random_quote
from bot.horoscope import get_horoscope
from bot.attractions import get_attractions

import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API –∫–ª—é—á


# ---------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------------
def build_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìÖ –í—Ä–µ–º—è", callback_data="time")],
        [InlineKeyboardButton("‚òÄÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è", callback_data="quote")],
        [InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope")],
        [InlineKeyboardButton("üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="places")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def show_main_menu(update_or_query, context):
    reply_markup = build_main_menu()
    if hasattr(update_or_query, "message"):
        await update_or_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    elif hasattr(update_or_query, "edit_message_text"):
        await update_or_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# ---------------- –°—Ç–∞—Ä—Ç ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=build_main_menu())


# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ----------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "time":
        context.user_data["awaiting"] = "time"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=ReplyKeyboardRemove())

    elif query.data == "weather":
        context.user_data["awaiting"] = "weather"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã:", reply_markup=ReplyKeyboardRemove())

    elif query.data == "quote":
        await query.message.reply_text(get_random_quote())
        await show_main_menu(query, context)

    elif query.data == "horoscope":
        await show_zodiac_keyboard(query)

    elif query.data == "places":
        context.user_data["awaiting"] = "places"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:")


# ---------------- –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ ----------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("awaiting")

    if mode == "weather":
        city = update.message.text
        await update.message.reply_text(get_weather(city))
        context.user_data["awaiting"] = None
        await show_main_menu(update, context)

    elif mode == "time":
        city = update.message.text
        await update.message.reply_text(get_current_time(city))
        context.user_data["awaiting"] = None
        await show_main_menu(update, context)

    elif mode == "places":
        city = update.message.text
        await update.message.reply_text("–ò—â—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        result = get_attractions(city)
        await update.message.reply_text(result)
        context.user_data["awaiting"] = None
        await show_main_menu(update, context)


# ---------------- –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ ----------------
ZODIAC = {
    "aries": "‚ôà –û–≤–µ–Ω", "taurus": "‚ôâ –¢–µ–ª–µ—Ü", "gemini": "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
    "cancer": "‚ôã –†–∞–∫", "leo": "‚ôå –õ–µ–≤", "virgo": "‚ôç –î–µ–≤–∞",
    "libra": "‚ôé –í–µ—Å—ã", "scorpio": "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "sagittarius": "‚ôê –°—Ç—Ä–µ–ª–µ—Ü",
    "capricorn": "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "aquarius": "‚ôí –í–æ–¥–æ–ª–µ–π", "pisces": "‚ôì –†—ã–±—ã"
}


async def show_zodiac_keyboard(query):
    keyboard = []
    keys = list(ZODIAC.items())
    for i in range(0, len(keys), 3):
        row = [
            InlineKeyboardButton(emoji, callback_data=f"sign:{sign}")
            for sign, emoji in keys[i:i + 3]
        ]
        keyboard.append(row)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=reply_markup)


# ---------------- –û—Ç–≤–µ—Ç –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É ----------------
async def handle_zodiac(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("sign:"):
        sign = query.data.split(":")[1]
        result = get_horoscope(sign)
        await query.message.reply_text(result)
        await show_main_menu(query, context)


# ---------------- –ó–∞–ø—É—Å–∫ ----------------
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(time|weather|quote|horoscope|places)$"))
    app.add_handler(CallbackQueryHandler(handle_zodiac, pattern="^sign:"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
